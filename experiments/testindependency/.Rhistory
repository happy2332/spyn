if(!is.null(ptest)){
return(ptest)
}
return(0)
}
}
a
cols=5
a <- foreach(j = 1:cols, .combine=cbind) %do% {
foreach(i = 1:cols, .combine=c) %do% {
if(var(data[,i]) == 0 || var(data[,j]) == 0){
return(0)
}
if(i>j){
return(0)
}
fmla = as.formula(paste("V" ,i, " ~ V",j, sep = ''))
#tree = glmtree(fmla, data, family="poisson", verbose = FALSE, maxit = 25, maxdepth=1)
tree = glmtree(fmla, data, family="poisson", verbose = FALSE, minsize=5)
ptest = sctest.modelparty(tree,node=1)[2,]
if(!is.null(ptest)){
return(ptest)
}
return(0)
}
}
a
tr(a)
t(a)
ta = t(a)
ta
diag(ta)<-0
ta
ta+a
adjc <- foreach(j = 1:cols, .combine=cbind) %do% {
foreach(i = 1:cols, .combine=c) %do% {
if(var(data[,i]) == 0 || var(data[,j]) == 0){
return(0)
}
if(i>j){
return(0)
}
fmla = as.formula(paste("V" ,i, " ~ V",j, sep = ''))
#tree = glmtree(fmla, data, family="poisson", verbose = FALSE, maxit = 25, maxdepth=1)
tree = glmtree(fmla, data, family="poisson", verbose = FALSE, minsize=5)
ptest = sctest.modelparty(tree,node=1)[2,]
if(!is.null(ptest)){
return(ptest)
}
return(0)
}
}
adjc
transposeadj = adjc
diag(transposeadj)<-0
adjc
transposeadj
transposeadj = t(adjc)
diag(transposeadj)<-0
adjc
transposeadj
adjc = adjc + transposeadj
adjc
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
start.time <- Sys.time()
ptestpdnpairwise(data)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
data
var(data)
apply(data, 2, var)
c = apply(data, 2, var)
c
c[1]
c[2]
c[2] == 0
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sim <- XMRF.Sim(n=1000, p=10, model="LPGM", graph.type="scale-free")
model = LPGM.select(sim$X, parallel=FALSE)
model = XMRF(sim$X, parallel=FALSE)
library(XMRF)
model = XMRF(sim$X, parallel=FALSE)
sim <- XMRF.Sim(n=1000, p=10, model="LPGM", graph.type="scale-free")
model = XMRF(sim$X, parallel=FALSE)
model = XMRF(sim$X, parallel=FALSE,  stability="star")
model$network[model$opt.index]
model
print(model)
plot(model)
model = XMRF(sim$X, stability="star")
model$network[model$opt.index]
sim <- XMRF.Sim(n=100, p=10, model="LPGM", graph.type="scale-free")
model = XMRF(sim$X, stability="star")
model$network[model$opt.index]
model = XMRF(sim$X)
sim <- XMRF.Sim(n=100, p=20, model="LPGM", graph.type="scale-free")
sim <- XMRF.Sim(n=100, p=20, model="LPGM", graph.type="scale-free")
simDat <- sim$X
lmax = lambdaMax(t(simDat))
lambda = 0.01* sqrt(log(p)/n) * lmax
p=20
n=100
sim <- XMRF.Sim(n=n, p=p, model="LPGM", graph.type="scale-free")
simDat <- sim$X
lmax = lambdaMax(t(simDat))
lambda = 0.01* sqrt(log(p)/n) * lmax
lpgm.fit <- XMRF(simDat, method="LPGM", N=10, lambda.path=lambda)
model <- XMRF(simDat, method="LPGM", N=10, lambda.path=lambda)
model
plot(model)
plot(sim)
plotNet(sim)
plotNet(sim$B)
lambda=NULL
model <- XMRF(simDat, method="LPGM", N=10, lambda.path=lambda)
model <- XMRF(simDat, method="LPGM", N=10, lambda.path=lambda, stability="star")
plot(sim)
plot(model)
sim <- XMRF.Sim(n=1000, p=20, model="LPGM", graph.type="scale-free")
p=20
n=1000
sim <- XMRF.Sim(n=n, p=p, model="LPGM", graph.type="scale-free")
simDat <- sim$X
lmax = lambdaMax(t(simDat))
lambda = 0.01* sqrt(log(p)/n) * lmax
model <- XMRF(simDat, method="LPGM", N=10, lambda.path=lambda)
model$network[model$opt.index]
plot(model)
model <- XMRF(simDat, method="LPGM", N=10, lambda.path=lambda, beta=0.001,sth=0.9)
plot(model)
model$network[model$opt.index]
model$lambda.path
model <- XMRF(simDat, method="LPGM", N=30, lambda.path=lambda, beta=0.001,sth=0.9)
plot(model)
model$network
sim$B
sim$B-model$network
sim$B - model$network
as.matrix(sim$B) - as.matrix(model$network)
g = as.matrix(sim$B) - as.matrix(model$network)
as.matrix(sim$B)
as.matrix(model$network)
as.data.frame(model$network)
as.data.frame(model$network)-sim$B
abs(as.data.frame(model$network)-sim$B)
sum(abs(as.data.frame(model$network)-sim$B))
sum(abs(as.data.frame(model$network)-sim$B))/2
sim$B-as.data.frame(model$network)
p=50
n=1000
sim <- XMRF.Sim(n=n, p=p, model="LPGM", graph.type="scale-free")
simDat <- sim$X
lmax = lambdaMax(t(simDat))
lambda = 0.01* sqrt(log(p)/n) * lmax
model <- XMRF(simDat, method="LPGM", N=30, lambda.path=lambda)
plot(model)
model$network[model$opt.index]
as.data.frame(model$network)-sim$B
sum(as.data.frame(model$network)-sim$B)
sum(abs(as.data.frame(model$network)-sim$B))
library("XMRF")
library(jsonlite)
library(iterators)
library(grid)
library(partykit)
library(Formula)
library(foreach)
library(doMC)
library(parallel)
library(dplyr)
library(gtools)
library(igraph)
registerDoMC(detectCores()-1)
options(warn = -1)
#data<-read.csv2("/Users/alejomc/Dropbox/pspn/spyn/bin/data/graphlets/out/wl/1mutag.build_wl_corpus.csv", header = FALSE, sep = ",",  quote="\"", skip=1)
#data<-read.csv2("/home/molina/Dropbox/Papers/pspn/spyn/bin/data/graphlets/out/wl/1mutag.build_wl_corpus.csv", header = FALSE, sep = ",",  quote="\"", skip=1)
#data<-read.csv2("/home/molina/Dropbox/Papers/pspn/spyn/bin/data/graphlets/out/wl/2ptc.build_wl_corpus.csv" , header = FALSE,  sep = ",",  quote="\"", skip=1)
ptestpdnglm <- function(data) {
data = as.data.frame(data)
cols = ncol(data)
vard = apply(data, 2, var)
n = mixedsort(names(data))
adjc <- foreach(i = 1:cols, .combine=rbind) %dopar% {
fmla = as.formula(paste(n[i], " ~ . ", sep = ''))
tree = glmtree(fmla, data, family="poisson", verbose = FALSE, maxdepth=2)
#tree = glmtree(fmla, data, family="poisson", verbose = FALSE, maxit = 25, maxdepth=2)
#tree = glmtree(fmla, data, family="poisson", verbose = FALSE, minsize=5)
treeresults = sctest.modelparty(tree,node=1)
ptest = as.data.frame(matrix(1, ncol=cols,nrow=1))
colnames(ptest)<-n
if(!is.null(ptest)){
ptest[1,colnames(treeresults)] = treeresults[2,colnames(treeresults)]
return(ptest)
}
return(matrix(1,ncol=cols))
}
rownames(adjc)<-n
pvals = pmin(adjc[upper.tri(adjc)],t(adjc)[upper.tri(adjc)])
adjc[upper.tri(adjc)] = pvals
adjc = adjc + t(adjc)
diag(adjc)<-1
return(adjc)
}
findpval <- function(data){
ptests = ptestglmblock(data)
return(median(ptests[ptests<0.05]))
}
ptestglmblock <- function(data, family) {
if(dim(data)[2] < 5){
return(ptestpdnglm(data))
}
start.time <- Sys.time()
n = mixedsort(names(data))
nblocks = ceiling(dim(data)[2] / 100)
if(nblocks < 1){
nblocks = 1
}
blocks = split(n, rank(n) %% nblocks)
ptests = foreach(ni = n, .combine=rbind) %dopar% {
#for(ni in n){
ptestscols = foreach(bk = blocks, .combine=c) %do% {
#for(bk in blocks){
othervars = bk[bk != ni]
fmla = as.formula(paste(ni, " ~ ", paste(othervars, collapse = ' + '), sep=' '))
tree = glmtree(fmla, data, family=family, verbose = FALSE, maxdepth=2)
ptest = sctest.modelparty(tree,node=1)[2,]
if(is.null(ptest)){
ptest = array(1, dim=length(othervars))
#ptest = matrix(1,ncol=length(othervars))
names(ptest) <- othervars
}
return(ptest)
}
ptestscols[ni] = 1
ptestscols = ptestscols[mixedsort(names(ptestscols))]
ptestscols[]
return(ptestscols)
}
rownames(ptests) = n
#if there was a problem computing the pvalues, default to 1
ptests[is.na(ptests)] <- 1
print(paste("ptest time: ", format(difftime(Sys.time(), start.time)),
"ptest min: ", min(ptests),
"ptest max: ", max(ptests),
"ptest mean: ", mean(ptests)
))
return(ptests)
}
subconnected2 <- function(ptests) {
library(igraph)
start.time <- Sys.time()
wptests = 1-ptests
vas = matrix(0, nrow = dim(ptests)[1], ncol=2)
rownames(vas)<-rownames(ptests)
maxval = max(wptests)
repeat{
#get clusters
g = graph.adjacency(wptests, mode="max", weighted=TRUE, diag=FALSE)
c = clusters(g)
#variable assignment to subsets
vas[,]=0
for(w in order(c$csize, decreasing = TRUE)){
j = which.min(apply(vas, 2, sum))
vas[c$membership == w,j] = 1
}
binsizes = apply(vas, 2, sum)
r = min(binsizes)/sum(vas)
ptestcut = median(wptests[wptests>0])
if(ptestcut == maxval){
#we couldn't really partition this
vas[,1]=1
vas[,2]=0
break
}
if(r >= 0.3){
break
}
wptests[wptests <= ptestcut] = 0
}
print("independent components")
print(Sys.time() - start.time)
return(vas)
#plot.igraph(g,vertex.label=V(g)$name,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(g)$weight)
#min_cut(g, capacity = E(g)$weight, value.only = FALSE)
#cluster_spinglass(g, spins = 2)
}
subconnected <- function(ptests, alpha) {
#alpha = 1-alpha
#wptests = 1-ptests
#wptests[wptests <= alpha] = 0
ptests[ptests>alpha] = 0
vas = matrix(0, nrow = dim(ptests)[1], ncol=2)
rownames(vas)<-rownames(ptests)
g = graph.adjacency(ptests, mode="min", weighted=TRUE, diag=FALSE)
c = clusters(g)
print(paste("Number of connected components", c$no,":",toString(table(c$membership))))
for(w in order(c$csize, decreasing = TRUE)){
j = which.min(apply(vas, 2, sum))
vas[c$membership == w,j] = 1
}
return(vas)
}
subclusters <- function(ptests, alpha) {
ptests[ptests>alpha] = 0
ptests[ptests > 0] = 1
g = graph.adjacency(as.matrix(ptests), mode="min", weighted=TRUE, diag=FALSE)
c = clusters(g)
res = c$membership
names(res)<-NULL
return(res)
}
getIndependentGroupsAlpha <- function(data, alpha, family) {
return(subclusters(ptestglmblock(data, family), alpha))
}
getIndependentGroupsAlpha3 <- function(data, alpha) {
return(subconnected(ptestglmblock(data), alpha))
}
getIndependentGroupsAlpha2 <- function(data, alpha) {
return(subconnectedCombined(ptestglmblock(data)))
}
subconnectedCombined <- function(ptests){
library(igraph)
start.time <- Sys.time()
wptests = 1-ptests
vas = matrix(0, nrow = dim(ptests)[1], ncol=2)
rownames(vas)<-rownames(ptests)
g = graph.adjacency(wptests, mode="max", weighted=TRUE, diag=FALSE)
c = clusters(g)
if(c$no ==  1){
s = cluster_spinglass(g, spins = 2)
vas[s[[1]],1] = 1
if(length(s) > 1){
vas[s[[2]],2] = 1
}
}else{
for(w in order(c$csize, decreasing = TRUE)){
j = which.min(apply(vas, 2, sum))
vas[c$membership == w,j] = 1
}
}
print("independent components")
print(Sys.time() - start.time)
return(vas)
}
subconnectedCD <- function(ptests) {
library(igraph)
start.time <- Sys.time()
wptests = 1-ptests
vas = matrix(0, nrow = dim(ptests)[1], ncol=2)
rownames(vas)<-rownames(ptests)
g = graph.adjacency(wptests, mode="max", weighted=TRUE, diag=FALSE)
s = cluster_spinglass(g, spins = 2)
vas[s[[1]],1] = 1
if(length(s) > 1){
vas[s[[2]],2] = 1
}
print("independent components")
print(Sys.time() - start.time)
return(vas)
}
#dim = 8
#nval = 100*dim
#data = as.data.frame(ceiling(matrix(runif(nval,min=1,max=10),ncol=dim)))
#start.time <- Sys.time()
#pt = ptestpdnglm(data[,c(117,15,114,590,668,sample(1:dim(data)[2],10))])
#ptests = getIndependentGroups(data)
#end.time <- Sys.time()
#time.taken <- end.time - start.time
#print(time.taken)
#print(round(pt,2))
#diag(pt) = 1
#print(any(round(pt,2) < 0.05))
set.seed(123)
simData <- function(n, p) {
sim1 <- XMRF.Sim(n=n, p=p/2, model="LPGM", graph.type="scale-free")
#hist(sim1$X)
#plotNet(sim1$B)
sim2 <- XMRF.Sim(n=n, p=p/2, model="LPGM", graph.type="hub")
#hist(sim2$X)
#plotNet(sim2$B)
data = cbind(t(sim1$X), t(sim2$X))
z = matrix(0, p/2, p/2)
network = rbind(cbind(sim1$B, z),cbind(z, sim2$B))
return(list("network" = network, "data" = data))
#write.table(t(sim1$X), file = "sim1X.csv", sep = ",", row.names=FALSE)
#write.table(t(sim2$X), file = "sim2X.csv", sep = ",", row.names=FALSE)
#write.table(t(sim1$B), file = "sim1B.csv", sep = ",", row.names=FALSE)
#write.table(t(sim2$B), file = "sim2B.csv", sep = ",", row.names=FALSE)
#write.table(data, file = "synthetic.csv", sep = ",", row.names=FALSE)
#write.table(network, file = "network.csv", sep = ",", row.names=FALSE)
#pos = plotNet(network)
#write.table(pos, file = "pos.csv", sep = ",", row.names=FALSE)
}
runExp <- function(n, p, r, alphas) {
xmrfre = matrix(0, nrow=r, ncol=2)
result = list()
for(alpha in alphas){
glmpt = matrix(1, nrow=r, ncol=2)
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]] <- glmpt
}
for(i in 1:r) {
net = simData(n,p)
for(alpha in alphas){
start.time <- Sys.time()
ptestvals = ptestpdnglm(net$data)
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]][i,1] = Sys.time() - start.time
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]][i,2] = sum((ptestvals < alpha) != (net$network==TRUE))/2
}
start.time <- Sys.time()
lpgm.fit <- XMRF(t(net$data), method="LPGM", lambda.path=0.01* sqrt(log(p)/n) * lambdaMax(net$data))
xmrfre[i,1] = Sys.time() - start.time
xmrfre[i,2] = sum((as.data.frame(lpgm.fit$network) == 1) != (net$network==TRUE))/2
result[["xmrf"]] = xmrfre
cat(i, n,p,"\n")
}
return(result)
}
nrsamples = 50
n=2000
p=50
alpha = 0.001
r = 50
xmrfre = matrix(0, nrow=r, ncol=2)
result = list()
alphas = c(0.001)
for(alpha in alphas){
glmpt = matrix(1, nrow=r, ncol=2)
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]] <- glmpt
}
i = 1
net = simData(n,p)
net
plotNet(net)
plotNet(net)
plotNet(net$network)
for(alpha in alphas){
start.time <- Sys.time()
ptestvals = ptestpdnglm(net$data)
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]][i,1] = Sys.time() - start.time
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]][i,2] = sum((ptestvals < alpha) != (net$network==TRUE))/2
}
lpgm.fit <- XMRF(t(net$data), method="LPGM", lambda.path=0.01* sqrt(log(p)/n) * lambdaMax(net$data))
start.time <- Sys.time()
lpgm.fit <- XMRF(t(net$data), method="LPGM", lambda.path=0.01* sqrt(log(p)/n) * lambdaMax(net$data))
xmrfre[i,1] = Sys.time() - start.time
xmrfre[i,1]
Sys.time() - start.time
a = Sys.time() - start.time
a
as.int(a)
difftime
difftime(Sys.time(), start.time, units="secs")
a = difftime(Sys.time(), start.time, units="secs")
a
result[["xmrf"]][i,1] = difftime(Sys.time(), start.time, units="secs")
as.numeric(difftime(Sys.time(), start.time, units="secs"))
source('~/Dropbox/Papers/pspn/spyn/bin/experiments/testindependency/CompareXMRFtoINDtest.R')
as.numeric(difftime(Sys.time(), start.time, units="secs"))
as.numeric(difftime(Sys.time(), start.time, units="secs"))
n=100
p=5
r = 50
alphas=c(0.001)
xmrfre = matrix(0, nrow=r, ncol=2)
result = list()
for(alpha in alphas){
glmpt = matrix(1, nrow=r, ncol=2)
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]] <- glmpt
}
i = 1
net = simData(n,p)
start.time <- Sys.time()
ptestvals = ptestpdnglm(net$data)
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]][i,1] = as.numeric(difftime(Sys.time(), start.time, units="secs"))
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]][i,2] = sum((ptestvals < alpha) != (net$network==TRUE))/2
for(alpha in alphas){
start.time <- Sys.time()
ptestvals = ptestpdnglm(net$data)
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]][i,1] = as.numeric(difftime(Sys.time(), start.time, units="secs"))
result[[paste("glmptest",format(alpha, scientific = FALSE),sep="_")]][i,2] = sum((ptestvals < alpha) != (net$network==TRUE))/2
}
start.time <- Sys.time()
lpgm.fit <- XMRF(t(net$data), method="LPGM", lambda.path=0.01* sqrt(log(p)/n) * lambdaMax(net$data))
result[["xmrf"]][i,1] = as.numeric(difftime(Sys.time(), start.time, units="secs"))
result[["xmrf"]][1] = as.numeric(difftime(Sys.time(), start.time, units="secs"))
result[["xmrf"]][2] = sum((as.data.frame(lpgm.fit$network) == 1) != (net$network==TRUE))/2
result
i
result[["xmrf"]]
result[["xmrf"]][1,1] = 1
source('~/Dropbox/Papers/pspn/spyn/bin/experiments/testindependency/CompareXMRFtoINDtest.R')
setwd("~/Dropbox/Papers/pspn/spyn/bin/experiments/testindependency")
source('~/Dropbox/Papers/pspn/spyn/bin/experiments/testindependency/CompareXMRFtoINDtest.R')
source('~/Dropbox/Papers/pspn/spyn/bin/experiments/testindependency/CompareXMRFtoINDtest.R')
